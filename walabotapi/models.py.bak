from flask import current_app
from datetime import datetime 
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from walabotapi import db, login_manager
from flask_login import UserMixin

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(25), unique=True, nullable=False)
    email = db.Column(db.String(125), unique=True, nullable=False)
    password = db.Column(db.String(50), unique=False, nullable=False)
    devices = db.relationship('Device', backref='owner', lazy=True)

    def get_reset_token(self, expires_sec=1800):
        s = Serializer(current_app.config['SECRET_KEY'], expires_sec)
        return s.dumps({'user_id': self.id}).decode('utf-8')

    @staticmethod
    def verify_reset_token(token):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            user_id = s.loads(token)['user_id']
        except:
            return None
        return User.query.get(user_id)

    def __repr__(self):
        return f"User('{self.username}', '{self.email}')"


class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(26), unique=True, nullable=False)
    patient_name = db.Column(db.String(25), nullable=False)
    location = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f"Device('{self.device_id}', '{self.patient_name}', '{self.location}')"


class Fall(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(26), unique=False)
    end_timestamp = db.Column(db.Integer, nullable=True)
    is_silent = db.Column(db.Boolean, default=False)
    is_learning = db.Column(db.Boolean, default=False)
    is_simulated = db.Column(db.Boolean, default=False)
    status = db.Column(db.String(20), unique=False)
    status_update_timestamp = db.Column(db.Integer, unique= False, nullable=False)
    timestamp = db.Column(db.Integer, unique=False, nullable=False)
    type_ = db.Column(db.String(4), default='fall')
    timestamp_str = db.Column(db.String(30), unique=False, nullable=False)
    event_id = db.Column(db.String(25), unique=False, nullable=False)

    def __repr__(self):
        return f"Fall('{self.event_id}', '{self.status}', '{self.timestamp_str}', '{self.is_simulated}')"


class Presence(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(26), unique=False)
    timestamp = db.Column(db.Integer, unique=False, nullable=False)
    presence_detected = db.Column(db.Boolean, default=False)
    presence_region_map = db.Column(db.String(50))

    def __repr__(self):
        return f"Presence('{self.presence_detected}', '{self.device_id}', '{self.timestamp}')"


class Status(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(26), unique=False)
    timestamp = db.Column(db.Integer, unique=False, nullable=False)
    temperature = db.Column(db.Integer, unique=False, nullable=False)
    humidity = db.Column(db.Integer, unique=False, nullable=False)
    status = db.Column(db.String(12), unique=False, nullable=False)
    battery_temperature = db.Column(db.Integer, unique=False, nullable=False)
    battery_level = db.Column(db.Integer, unique=False, nullable=False)
    up_time = db.Column(db.Integer, unique=False, nullable=False)
    wifi_state = db.Column(db.String(256), unique=False, nullable=False)
    storage_state = db.Column(db.String(256), unique=False, nullable=False)
    
    def __repr__(self):
        return f"Status('{self.status}', '{self.device_id}', '{self.timestamp}')"
